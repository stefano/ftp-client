; Copyright (c) 2008 Dissegna Stefano

; do whatever you want with this

; to download a file use:
; > (ftp-get-file "the/path/of/the/file" "the-host")
 
(= ftp-block-eof* 64)

(= ftp-parse-resp (seq (n-times (one-of "0123456789") 3) (one-of "- ")))

(def ftp-parse-n-parts (n line start)
  (if (> n 0)
    (let end (pos (if (is n 1) #\) #\,) line start)
      (cons (cut line start end) (ftp-parse-n-parts (- n 1) line (+ end 1))))))

(def ftp-parse-pasv (line)
  "parse response to PASV
   !! no error checking"
  (let res (ftp-parse-n-parts 6 line (+ (pos #\( line) 1))
    (with (address (cut res 0 4)
           port (cut res 4 6))
      (list (apply string (intersperse #\. address)) 
            (+ (* 256 (read (port 0))) (read (port 1)))))))

(def ftp-resp-code (in-s)
  "get the response (code . response) or nil"
  (let line (trim (readline in-s) 'end #\return)
    (when (> (len line) 2)
      (awhen (ftp-parse-resp line 0)
        (if (is (cadr (car it)) " ") ; one-liner 
              (cons (reduce string (caar it)) line)
            (is (cadr (car it)) "-") ; multi-line
              (let code (reduce string (caar it))
                (cons code 
                      (string line #\newline (ftp-resp-upto in-s code)))))))))

(def ftp-resp-upto (in-s code (o acc ""))
  (let line (readline in-s)
    (if (and (>= (len line) 4) (is (cut line 0 4) (string code " ")))
      acc
      (ftp-resp-upto in-s code (string acc "\n" line)))))

(def ftp-all-resps (in-s)
  "get all responses"
  (rev:accum acc
    ((afn () (awhen (ftp-resp-code in-s)
               (acc it)
               (if (is ((car it) 0) #\1) ; continue
                 (self)))))))

(def ftp-mk-cmd (cmd (o want-resp t))
  "create a function that executes a command and that returns a 
   list of responses"
  (fn (in-s out-s . args) 
    (w/stdout out-s
      (apply pr (upcase cmd) " " (when args (intersperse " " args)))
      (pr:string #\newline #\return)
      (flush-socket out-s)
      (when want-resp
        (ftp-all-resps in-s)))))

(mac ftp-defcmds cmds
  `(do
     ,@(map [let name (sym:string 'ftp- _)
              `(= ,name (ftp-mk-cmd ,(string _)))]
            cmds)))

; acess control
(ftp-defcmds user pass cwd cdup quit)

; transfer parameters
(ftp-defcmds pasv port type mode)

; service commands
(ftp-defcmds retr stor pwd)

(def ftp-get-stream-mode (in-s)
  "read a file in STREAM mode, return it as a string"
  (tostring
    (whiler c (readb in-s) nil ; read upto EOF
      (writeb c))))

; !! not tested
(def ftp-get-block-mode (in-s)
  "read a file in BLOCK mode, return it as a string"
  (tostring
    (let type nil
      (until (is type ftp-block-eof*)
        (let (tp block) (ftp-get-single-block in-s)
          (= type tp)
          (pr block))))))

(def ftp-get-single-block (in-s)
  "read a single block, return type of block and the block"
  ; read the header
  (with (desc (or (readb in-s) (err "Cannot read block header!"))
         count (+ (* (coerce (readb in-s) 'int) 256)
                  (coerce (readb in-s) 'int)))
    ; read the block
    (list (coerce desc 'int)
          (tostring
            (for i 1 count
              (aif (readb in-s)
                (writeb it)
                (err "Connection closed before full file transfer!")))))))

(mac w/connection (in-s out-s host port . body)
  "connect and execute body"
  (w/uniq (h p)
    `(withs (,h ,host ,p ,port)
       (let (,in-s ,out-s) (connect-socket ,h ,p)
         (protect (fn () ,@body)
                  (fn () (close ,in-s) (close ,out-s)))))))

(mac ftp-w/session (in-s out-s host port . body)
  "execute body within an ftp section"
  `(w/connection ,in-s ,out-s ,host ,port
     (ftp-all-resps ,in-s) ; throw away server greetings
     ,@body))

(def ftp-pasv-retr (i o file (o mode 'stream))
  "retrieve file in passive mode"
  (awhen (ftp-pasv i o)
    (let (host port) (ftp-parse-pasv (cdr (last it)))
      (let res nil
        ; we must run asynchronously a thread to get the file
        ; and a thread (the main thread) to read the server response
        (let getter (thread
                      (w/connection i o host port
                        (let x (if (is mode 'stream) (ftp-get-stream-mode i)
                                   (is mode 'block) (ftp-get-block-mode i)
                                   (err "ftp: unknown mode!"))
                          (atomic (= res x)))))
          (let resp (ftp-retr i o file)
            (if (is ((car (last resp)) 0) #\5)
                  (do
                    (kill-thread getter)
                    (err:string "ftp: couldn't get file: " (cdr (last resp))))
                (is ((car (last resp)) 0) #\4)
                  (do
                    (kill-thread getter)
                    (err:string "ftp: temporary server error: "
                                (cdr (last resp)))) 
                (do
                  ; wait for the thread to finish
                  ; we get a response from the FTP server only after the 
                  ; transfer has been completed, so we won't spin too much
                  (while (no res))
                  res))))))))

(def ftp-get-file (file host (o port 21) (o user "anonymous") 
                                         (o pass "anonymous"))
  "get a file through the FTP protocol using anonymous as user"
  (ftp-w/session i o host port 
    (ftp-user i o user) 
    (ftp-pass i o pass)
    (ftp-pasv-retr i o file)))
